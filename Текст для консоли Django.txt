1.Создать двух пользователей (с помощью метода User.objects.create_user('username')).
      u1 = User.objects.create_user(username='Denis')
      u2 = User.objects.create_user(username='Dima')
2.Создать два объекта модели Author, связанные с пользователями.
      Author.objects.create(authorUser=u1)
      Author.objects.create(authorUser=u2)
3.Добавить 4 категории в модель Category.
     Category.objects.create(name='sport')
     Category.objects.create(name='politics')
     Category.objects.create(name='economy')
     Category.objects.create(name='education')
4.Добавить 2 статьи и 1 новость.
     author = Author.objects.get(id=1)
     author2 = Author.objects.get(id=2)
     Post.objects.create(author=author, categoryType='NW', title='sometitle', text='somebigtext')
     Post.objects.create(author=author, categoryType='AR', title='sometitle2', text='somebigtext2')
     Post.objects.create(author=author2, categoryType='AR', title='sometitle3', text='somebigtext3')
5.Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий).
     Post.objects.get(id=1).postCategory.add(Category.objects.get(id=1))
     Post.objects.get(id=1).postCategory.add(Category.objects.get(id=2))
     Post.objects.get(id=2).postCategory.add(Category.objects.get(id=3))
     Post.objects.get(id=1).postCategory.add(Category.objects.get(id=4))
     Post.objects.get(id=3).postCategory.add(Category.objects.get(id=4))
6.Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий).
    Comment.objects.create(commentPost=Post.objects.get(id=1), commentUser=Author.objects.get(id=1).authorUser, text='anytext')
    Comment.objects.create(commentPost=Post.objects.get(id=1), commentUser=Author.objects.get(id=2).authorUser, text='anytext2')
    Comment.objects.create(commentPost=Post.objects.get(id=2), commentUser=Author.objects.get(id=1).authorUser, text='anytext3')
    Comment.objects.create(commentPost=Post.objects.get(id=3), commentUser=Author.objects.get(id=1).authorUser, text='anytext4')
7.Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов.
    Comment.objects.get(id=1).like()
    Comment.objects.get(id=2).dislike()
    Comment.objects.get(id=3).like()
    Comment.objects.get(id=3).like()
    Comment.objects.get(id=4).dislike()
    Comment.objects.get(id=4).dislike()

    Comment.objects.get(id=1).rating
    Comment.objects.get(id=2).rating
    Comment.objects.get(id=3).rating
    Comment.objects.get(id=4).rating

    Post.objects.get(id=1).like()
    Post.objects.get(id=2).dislike()
    Post.objects.get(id=3).like()
    Post.objects.get(id=3).like()
    
    Post.objects.get(id=1).rating
    Post.objects.get(id=2).rating
    Post.objects.get(id=3).rating
8.Обновить рейтинги пользователей.
    a = Author.objects.get(id=1)
    a.update_rating()
    a.ratingAuthor
    b = Author.objects.get(id=2)
    b.update_rating()
    b.ratingAuthor
9.Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта).
    a = Author.objects.order_by('-ratingAuthor')[:1]
10.Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье.
    a = Post.objects.order_by('-rating')
    for i in a:
        i.dateCreation
        i.author
        i.rating
        i.title
        i.preview
11.Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.
    a = Comment.objects.order_by('-rating')
    for i in a:
        i.dateCreation
        i.commentUser
        i.rating
        i.text


